      PROJECT IDEAS

1. Write a program which takes ciphertext as input and performs
      Friedman's method of attack on a running key cipher(Assume the
      ciphertext has been generated by a running key cipher). Try to
      make your program as intelligent as possible. For instance, each
      ciphertext character will likely have been generated by several high
      frequency pairs. Based on these and neighboring pairs your program
      may try and make guesses to determine portions of plaintext and
      hence determine portions of the running key. Your program will be
      judged to some extent by its effectiveness and the degree to which
      the decrypting process is automated.
      Points: 60-80

2. Write a program which simulates a simple version of a rotor machine.
      This machine will only have two rotors. Assume that plaintext input
      is in the form of upper case and punctuation and spaces are not
      encrypted.
      Each input character is encrypted by the first rotor (the particular
      ciphertext character corresponding to each plaintext character is
      determined by the wheels orientation. It has 26 possible orientations) 
      The output of the first rotor is input to the second rotor which also
      has 26 orientations. The encryption of the character from the first
      rotor depends on the orientation of the second rotor. Every time a
      character is encrypted the first rotor revolves one position clockwise.
      When it makes one full revolution (every 26 encryptions) the second
      rotor turns one position clockwise. There are 676 different possible
      orientations. The starting orientations of the two rotors serve as the
      key. The encryption must be set up so that if A encrypts to W with a
      certain key then W encrypts to A with the same key. In that manner, it
      is easy to decrypt a message. We just start with the rotors in the 
      key position and type in the ciphertext. You should allow the user to
      specify a key and then encryption and decryption is done by reading
      from files (rather than typing from the keyboard). We are using a 
      simple rotor machine because later we have a project on trying to
      break this cipher. Note don't just have the rotors implement a shift
      (where the length of the shift is given by the rotors orientation).
      A affine substitution by each rotor is ok. 
      40-50 points

3. Write a program (possibly interactive) which attempts to automate
      the breaking of a simple substitution cipher. The user may have 
      occasion to steer the decryption process but for the most part the
      program should make intelligent choices for a sequence of single or
      multiple character substitutions and in some manner measure its
      progress toward the final solution (possibly by looking for key 
      words of plaintext or by statistical indicators). Human intervention
      is allowed but should be minimal. Your program should, for example,
      be able to solve shift substitutions. Can it solve cipher one?
      Your program will be tested on several simple substitution ciphers.
      This project is somewhat challenging and previous attempts by
      students have been disappointing with a couple of exceptions.
      Several years ago a student was able to write a program which 
      worked quite well. The number of points possible for this project
      is in the range 75-100 depending on how well your program works.
      Warning: no points given for a program which simply acts like a
      tool for substitution ciphers similar to the one already given out.

5. Write your own version of a Lucifer-like cipher system. The key
      length (it should be at least 16) and other specifications are up to you.
      You might want to talk to me for some advice and suggestions before
      you start this designing and coding this system. The points for this
      project are in the range 40-70. three or four students have
      successfully completed this cipher.

7. Write a program which will break the "two rotor" cipher machine.
      You may use any techniques that you like -statistical, exhaustion,
      etc. In order to demonstrate the effectiveness of your program, I
      will provide you with some cipher text from a two rotor machine. I
      will provide some insight into the "wiring" of the machine--but you
      must find the key. If you are interested in pursuing this option you
      should talk to me first. This program is worth 40-70.

11. This project is a simplified version of project 3.
      Write a program (possibly interactive) which attempts to
       automate the breaking of a simple affine substitution cipher.
      Your program should use techniques other than exhaustive search.
      For the most part, the program should make intelligent choices for a
      sequence of single or multiple character substitutions and in some
      manner measure its progress toward the final solution (possibly by
      looking for key words of plaintext or by statistical indicators).
      There should be little or no human intervention.

12. Implement your version of the homophonic cipher described in class.
      If you need some additional details see me; but you can also refer
      to the handout on the history of the Beale Ciphers.
      Your program should be able to encrypt and decrypt.

13. Write a program tool which will aid in making a serious attack on a
      homophonic cipher. Your tool can implement any number of ideas, but
      should certainly include important ngram statistics. This project is
      quite open ended.


25.     For this project you may do any of a,b, or c independently.
          However if you are going to do b) you should probably do a)
          first.
       a) Write a program which implements the method of 'fractionated
          Morse code'. Use a 0 for . (dot), 1 for (dash), and 2 for |
          (separator). Your program should be able to encrypt and decrypt
          files or plaintext from the keyboard.
          40 points. 

       b) Write a program which attempts to break a cipher of the type
          in part a. See the handout for suggestions.(40-50 points)
          The number of points will depend in large part how successful
          your program is. Your program should expect input from a
          ascii or binary file. 

       c) Morse code redivision- plaintext in morse code can be manipulated
          to possible yield latent messages. As an example....take the
          word THREE. In morse code this is 1 0000 010 0 0 which can be
          rewritten (redivisioned) 1000 001 000 which is the morse for BUS.
          Write a program which will convert a document to morse then
          look for 'meaningful' submessages. You might consider this project
          in conjunction with project 5.(You might want to see the
          book 'Times 17' by Gareth Penn, and his theories about the 
          infamous Zodiac killer).

26. Write a program which performs anagramming of a given phrase.
      That is given a phrase is should construct all (most) meaningfull
      anagrams of that phrase. Some programs of this type can be found
      on the internet. In order to get a good idea of what is required for
      this project you should investigate some of these anagramming
      demonstations.  The length of the phrase should be up to at least
      20 characters. A successful program could be integrated with our
      columnar transposition tools. You will receive bonus points if do
      the integration with one of our existing columnar transposition tools.
      The number of points awarded will depend
      on how successful your program is.
